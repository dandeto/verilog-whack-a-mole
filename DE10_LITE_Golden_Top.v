//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

//`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
//`define ENABLE_CLOCK2
//`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
//`define ENABLE_VGA
//`define ENABLE_ACCELEROMETER
//`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	wire [9:0]  cur_rnd_num;
	wire [23:0] score;
	wire [27:0] count;
	wire [9:0]  moles_out;
	reg  [23:0] high_score;
	wire        display_state;
	wire        mole_clk;
	wire        round_clk;
	wire        game_state;
	wire        start_button; // debounce output+
	reg button;
	wire [3:0]  led_select;
	
	reg         start_button_delay; // delay by 1 clock cycle for falling edge detect

//=======================================================
//  Structural coding
//=======================================================

always @(posedge MAX10_CLK1_50)
  begin
    start_button_delay <= start_button;
    if (start_button==1'b0 && start_button_delay==1'b1) begin
      button <= 1'b1;
    end else begin
      button <= 1'b0;
    end
  end

	prbs16 prng (
		.clk(MAX10_CLK1_50),
		.rst(0),
		.shiftEn(1),
		.outSeq(cur_rnd_num)
	);

	gameFSM fsm (
		.clk(MAX10_CLK1_50),   //
		.start_btn(button),
		.time_up(round_clk),
		.game_state(game_state)
	);
	
	up_counter #(
		.WIDTH (28),
		.TERM_CNT (100000000)
	) mole_counter (
		.clk(MAX10_CLK1_50),
		.reset(game_state), // reset counter when HIGHSCORE
		.en(~game_state),
		.count(count),
		.timer(mole_clk)
	);
   
	// count to 3 from divided clk
	up_counter #(
		.WIDTH (4),
		.TERM_CNT (15)
	) round_counter (
		.clk(mole_clk),
		.reset(game_state), // was key[0]
		.en(~game_state),
		.count(),
		.timer(round_clk) // determines when a round is over.
	);
	
	// clock divider for idle
	up_counter #(
		.WIDTH (22),
		.TERM_CNT (4194303)
	) idle_divider (
		.clk(MAX10_CLK1_50),
		.reset(~game_state), // reset counter when HIGHSCORE
		.en(game_state),
		.count(),
		.timer(idle_timer)
	);
	
	up_counter #(
		.WIDTH (4),
		.TERM_CNT (10)
	) idle_counter (
		.clk(idle_timer),
		.reset(~game_state), // was key[0]
		.en(game_state),
		.count(led_select),
		.timer() // determines when a round is over.
	);
	
	debounce #(.DWELL_CNT(16'd20)) dbc (
		.clk     (MAX10_CLK1_50),
		.sig_in  (KEY[0]),
		.sig_out (start_button)
);

	
	moles m (
		.clk(MAX10_CLK1_50),
		.mole_clk(mole_clk),
		.rst(game_state),
		.idle(led_select),
		.count(count),
		.random(cur_rnd_num), // number from prbs
		.switch({SW[9], SW[8], SW[7], SW[6], SW[5], SW[4], SW[3], SW[2], SW[1], SW[0]}),
		.moles(moles_out),
		.score(score)
	);

	always @(posedge MAX10_CLK1_50) begin
		if (score > high_score) begin
			high_score = score;
		end
	end
		 
   assign {LEDR[9], LEDR[8], LEDR[7], LEDR[6], LEDR[5], LEDR[4], LEDR[3], LEDR[2], LEDR[1], LEDR[0]} = moles_out[9:0];
   
	//assign LEDR[9] = round_clk; // debug
	//assign LEDR[8] = game_state;
	
	display_driver hex_leds (
		.clk        (MAX10_CLK1_50),
		.displayState(game_state),
		.dispMode   (1),
		.oneMsPulse (1),
		.reset      (~KEY[0]),
		.score   	(score),
		.highscore  (high_score),
		.HEX0       (HEX0),
		.HEX1       (HEX1),
		.HEX2       (HEX2),
		.HEX3       (HEX3),
		.HEX4       (HEX4),
		.HEX5       (HEX5)
	);

				 
endmodule
